@page "/invokeruletree"
@inject HttpClient Http
@inject HttpClient httpClient

<h1>Execute the RuleTree</h1>

<p>This component demonstrates how to invoke the RuleTree on the .NET server (i.e., a simulation) or on the chain.</p>

<div>
    <div class="row">
        <div class="col-sm-3">
            <p>RuleTree ID</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="RuleTreeId" bind="@RuleTreeId" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>New Sale EAN</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="Rule Tree Id" bind="@NewSaleEAN" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>New Sale Item Type</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="Type" bind="@NewSaleItemType" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Country Of Sale</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="Country" bind="@CountryOfSale" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>New Sales Trans Seq</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="Trans Seq" bind="@NewSalesTransSeq" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Invoke on Blockchain</p>
        </div>
        <div class="col-sm-4">
            <input type="checkbox" checked="@InvokeOnChain">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Result</p>
        </div>
        <div class="col-sm-4">
            <p>@finalresult</p>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-2">
            <button onclick="@Submit" class="btn">Submit</button>
        </div>
        <div class="col-sm-2">
            <button onclick="@GetStatus" class="btn">Get Status</button>
        </div>
    </div>
</div>

@functions {

    string RuleTreeId;
    string NewSaleEAN;
    string NewSaleItemType;
    string NewSalesTransSeq;
    string CountryOfSale;
    bool   InvokeOnChain;

    bool   requestDone;
    string finalresult;

    private async void GetStatus()
    {
        if (requestDone)
        {
            finalresult = "Done!";
        }
    }

    protected override async Task OnInitAsync()
    {
        RuleTreeId       = "VATCalculationExample";
        NewSaleEAN       = "9781234567890";
        NewSaleItemType  = "Widget";
        CountryOfSale    = "UK";
        NewSalesTransSeq = "123456789";
        InvokeOnChain    = true;

        requestDone = false;
    }

    private async Task SetFinalResult()
    {
        finalresult = "Done!";
    }

    private async Task SetRequestDone()
    {
        requestDone = true;
    }

    private async void Submit()
    {
        finalresult = "Sending request...";

        WonkaBlazorWebApp.Shared.WBWAInvokeRecord newInvokeRecord = new WonkaBlazorWebApp.Shared.WBWAInvokeRecord();

        newInvokeRecord.SetRuleTreeId(RuleTreeId);

        newInvokeRecord.RecordData["NewSaleEAN"]       = NewSaleEAN;
        newInvokeRecord.RecordData["NewSaleItemType"]  = NewSaleItemType;
        newInvokeRecord.RecordData["CountryOfSale"]    = CountryOfSale;
        newInvokeRecord.RecordData["NewSalesTransSeq"] = NewSalesTransSeq;

        newInvokeRecord.InvokeOnChain = InvokeOnChain;

        await Http.SendJsonAsync<WonkaBlazorWebApp.Shared.WBWAInvokeRecord>(System.Net.Http.HttpMethod.Post, "api/invoke", newInvokeRecord);

        await SetRequestDone();
    }

}
