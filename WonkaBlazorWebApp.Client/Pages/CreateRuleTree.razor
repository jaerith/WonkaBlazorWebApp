@page "/createruletree"
@inject HttpClient Http
@inject HttpClient httpClient

<h1>Create RuleTree</h1>

<p>This component demonstrates how to create a RuleTree either on the .NET domain or the chain.</p>

<div>
    <div class="row">
        <div class="col-sm-3">
            <p>Grove ID</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="GroveId" bind="@GroveId" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>RuleTree ID</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="RuleTreeId" bind="@RuleTreeId" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>RuleTree Markup Url</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="RuleTreeMarkupUrl" bind="@MarkupUrl" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Owner Name</p>
        </div>
        <div class="col-sm-4">
            <input placeholder="" bind="@OwnerName" />
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Serialize to Blockchain</p>
        </div>
        <div class="col-sm-4">
            <input type="checkbox" checked="@SerializeToChain">
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-3">
            <p>Result</p>
        </div>
        <div class="col-sm-4">
            <p>@finalresult</p>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-sm-2">
            <button onclick="@Submit" class="btn btn-primary">Submit</button>
        </div>
        <div class="col-sm-2">
            <button onclick="@GetStatus" class="btn btn-info">Get Status</button>
        </div>
    </div>
</div>

@functions {

    string GroveId;
    string RuleTreeId;
    string MarkupUrl;
    string OwnerName;
    bool   UseOrchMode;
    bool   SerializeToChain;

    bool   requestDone;
    string finalresult;

    private async void GetStatus()
    {
        if (requestDone)
        {
            finalresult = "Done!";
        }
    }

    protected override async Task OnInitAsync()
    {
        GroveId    = "NewSaleGroup";
        RuleTreeId = "VATCalculationExample";
        OwnerName  = "";
        MarkupUrl  = WonkaBlazorWebApp.Shared.WBWAConstants.CONST_VAT_CALC_RULETREE_URL;

        UseOrchMode      = true;
        SerializeToChain = true;

        requestDone = false;
    }

    private async Task SetFinalResult()
    {
        finalresult = "Done!";
    }

    private async Task SetRequestDone()
    {
        requestDone = true;
    }

    private async void Submit()
    {
        finalresult = "Sending request...";

        WonkaBlazorWebApp.Shared.WBWARuleTree newRuleTree = new WonkaBlazorWebApp.Shared.WBWARuleTree();

        newRuleTree.GroveId           = GroveId;
        newRuleTree.RuleTreeId        = RuleTreeId;
        newRuleTree.RuleTreeOriginUrl = MarkupUrl;
        newRuleTree.OwnerName         = OwnerName;

        newRuleTree.UsingOrchestrationMode = UseOrchMode;
        newRuleTree.SerializeToBlockchain  = SerializeToChain;

        await Http.SendJsonAsync<WonkaBlazorWebApp.Shared.WBWARuleTree>(System.Net.Http.HttpMethod.Post, "api/ruletree", newRuleTree);

        WonkaBlazorWebApp.Client.Shared.SimpleCache.LastRuleTreeCreated = RuleTreeId;

        await SetRequestDone();
    }

}
